{
  "Attribute using recommended pattern": {
    "prefix": "attribute",
    "body": [
      "[System.AttributeUsage(System.AttributeTargets.${1:All}, Inherited = ${2:false}, AllowMultiple = ${3:true})]",
      "sealed class ${4:My}Attribute : System.Attribute",
      "{",
      "    // See the attribute guidelines at",
      "    //  http://go.microsoft.com/fwlink/?LinkId=85236",
      "    readonly string positionalString;",
      "    ",
      "    // This is a positional argument",
      "    public ${4:My}Attribute(string positionalString)",
      "    {",
      "        this.positionalString = positionalString;",
      "        ",
      "        // TODO: Implement code here",
      "        ${5:throw new System.NotImplementedException();}",
      "    }",
      "    ",
      "    public string PositionalString",
      "    {",
      "        get { return positionalString; }",
      "    }",
      "    ",
      "    // This is a named argument",
      "    public int NamedInt { get; set; }",
      "}"
    ],
    "description": "Attribute using recommended pattern"
  },
  "Checked block": {
    "prefix": "checked",
    "body": [
      "checked",
      "{",
      "\t$0",
      "}"
    ],
    "description": "Checked block"
  },
  "Class": {
    "prefix": "class",
    "body": [
      "class ${1:myClass}",
      "{",
      "\t$0",
      "} // End of class $1"
    ],
    "description": "Class"
  },
  "Console.WriteLine": {
    "prefix": "cw",
    "body": [
      "System.Console.WriteLine($0);"
    ],
    "description": "Console.WriteLine"
  },
  "do...while loop": {
    "prefix": "do",
    "body": [
      "do",
      "{",
      "\t$0",
      "} while (${1:true});"
    ],
    "description": "do...while loop"
  },
  "Else statement": {
    "prefix": "else",
    "body": [
      "else",
      "{",
      "\t$0",
      "}"
    ],
    "description": "Else statement"
  },
  "Enum": {
    "prefix": "enum",
    "body": [
      "enum ${1:Name}",
      "{",
      "\t$0",
      "}"
    ],
    "description": "Enum"
  },
  "Implementing Equals() according to guidelines": {
    "prefix": "equals",
    "body": [
      "// override object.Equals",
      "public override bool Equals(object obj)",
      "{",
      "    //",
      "    // See the full list of guidelines at",
      "    //   http://go.microsoft.com/fwlink/?LinkID=85237",
      "    // and also the guidance for operator== at",
      "    //   http://go.microsoft.com/fwlink/?LinkId=85238",
      "    //",
      "    ",
      "    if (obj == null || GetType() != obj.GetType())",
      "    {",
      "        return false;",
      "    }",
      "    ",
      "    // TODO: write your implementation of Equals() here",
      "    ${1:throw new System.NotImplementedException();}",
      "    return base.Equals (obj);",
      "}",
      "",
      "// override object.GetHashCode",
      "public override int GetHashCode()",
      "{",
      "    // TODO: write your implementation of GetHashCode() here",
      "    ${2:throw new System.NotImplementedException();}",
      "    return base.GetHashCode();",
      "}"
    ],
    "description": "Implementing Equals() according to guidelines"
  },
  "Exception": {
    "prefix": "exception",
    "body": [
      "[System.Serializable]",
      "public class ${1:My}Exception : ${2:System.Exception}",
      "{",
      "\tpublic ${1:My}Exception() { }",
      "\tpublic ${1:My}Exception(string message) : base(message) { }",
      "\tpublic ${1:My}Exception(string message, System.Exception inner) : base(message, inner) { }",
      "\tprotected ${1:My}Exception(",
      "\t\tSystem.Runtime.Serialization.SerializationInfo info,",
      "\t\tSystem.Runtime.Serialization.StreamingContext context) : base(info, context) { }",
      "}"
    ],
    "description": "Exception"
  },
  "Foreach statement": {
    "prefix": "fore",
    "body": [
      "foreach (${1:var} ${2:item} in ${3:collection})",
      "{",
      "\t$0",
      "} // End of foreach"
    ],
    "description": "Foreach statement"
  },
  "Reverse for loop": {
    "prefix": "forr",
    "body": [
      "for (int ${1:i} = ${2:length} - 1; ${1:i} >= 0 ; ${1:i}--)",
      "{",
      "\t$0",
      "} // End of for-loop"
    ],
    "description": "Reverse for loop"
  },
  "for loop": {
    "prefix": "for",
    "body": [
      "for (int ${1:i} = 0; ${1:i} < ${2:length}; ${1:i}++)",
      "{",
      "\t$0",
      "} // End of for-loop"
    ],
    "description": "for loop"
  },
  "if statement": {
    "prefix": "if",
    "body": [
      "if (${1:true})",
      "{",
      "\t$0",
      "} // End of if-condition"
    ],
    "description": "if statement"
  },
  "else-if statement": {
    "prefix": "else if",
    "body": [
      "else if (${1:true})",
      "{",
      "\t$0",
      "}"
    ],
    "description": "else-if statement"
  },
  "Indexer": {
    "prefix": "indexer",
    "body": [
      "${1:public} ${2:object} this[${3:int} index]",
      "{",
      "\tget { $4 }",
      "\tset { $0 }",
      "}"
    ],
    "description": "Indexer"
  },
  "Interface": {
    "prefix": "interface",
    "body": [
      "interface ${1:IMyInterface}",
      "{",
      "\t$0",
      "} // End of interface $1"
    ],
    "description": "Interface"
  },
  "Safely invoking an event": {
    "prefix": "invoke",
    "body": [
      "${1:EventHandler} temp = ${2:MyEvent};",
      "if (temp != null)",
      "{",
      "\ttemp($0);",
      "} // End of if-condition"
    ],
    "description": "Safely invoking an event"
  },
  "Simple iterator": {
    "prefix": "iterator",
    "body": [
      "public System.Collections.Generic.IEnumerator<${1:ElementType}> GetEnumerator()",
      "{",
      "\t$0throw new System.NotImplementedException();",
      "\tyield return default(${1:ElementType});",
      "}"
    ],
    "description": "Simple iterator"
  },
  "Named iterator/indexer pair using a nested class": {
    "prefix": "iterindex",
    "body": [
      "public ${1:Name}Iterator ${1:Name}",
      "{",
      "\tget",
      "\t{",
      "\t\treturn new ${1:Name}Iterator(this);",
      "\t}",
      "}",
      "",
      "public class ${1:Name}Iterator",
      "{",
      "\treadonly ${2:ClassName} outer;",
      "\t",
      "\tinternal ${1:Name}Iterator(${2:ClassName} outer)",
      "\t{",
      "\t\tthis.outer = outer;",
      "\t}",
      "\t",
      "\t// TODO: provide an appropriate implementation here",
      "\tpublic int Length { get { return 1; } }",
      "",
      "\tpublic ${3:ElementType} this[int index]",
      "\t{",
      "\t\tget",
      "\t\t{",
      "\t\t\t//",
      "\t\t\t// TODO: implement indexer here",
      "\t\t\t//",
      "\t\t\t// you have full access to ${2:ClassName} privates",
      "\t\t\t//",
      "\t\t\t${4:throw new System.NotImplementedException();}",
      "\t\t\treturn default(${3:ElementType});",
      "\t\t}",
      "\t}",
      "\t",
      "\tpublic System.Collections.Generic.IEnumerator<${3:ElementType}> GetEnumerator()",
      "\t{",
      "\t\tfor (int i = 0; i < this.Length; i++)",
      "\t\t{",
      "\t\t\tyield return this[i];",
      "\t\t}",
      "\t}",
      "}"
    ],
    "description": "Named iterator/indexer pair using a nested class"
  },
  "Lock statement": {
    "prefix": "lock",
    "body": [
      "lock (${1:this})",
      "{",
      "\t$0",
      "}"
    ],
    "description": "Lock statement"
  },
  "MessageBox.Show": {
    "prefix": "mbox",
    "body": [
      "System.Windows.Forms.MessageBox.Show(\"${1:Text}\");$0"
    ],
    "description": "MessageBox.Show"
  },
  "Namespace": {
    "prefix": "ns",
    "body": [
      "namespace ${1:Name}",
      "{",
      "\t$0",
      "} // End of namespace $1"
    ],
    "description": "Namespace"
  },
  "#if": {
    "prefix": "#if",
    "body": [
      "#if ${1:true}",
      "\t$0",
      "#endif"
    ],
    "description": "#if"
  },
  "#region": {
    "prefix": "#region",
    "body": [
      "#region ${1:Name}",
      "\t$0",
      "#endregion"
    ],
    "description": "#region"
  },
  "Property and backing field": {
    "prefix": "propfull",
    "body": [
      "private ${1:int} ${2:myVar};",
      "public ${1:int} ${3:MyProperty}",
      "{",
      "\tget { return ${2:myVar}; }",
      "\tset { ${2:myVar} = value; }",
      "}",
      "$0"
    ],
    "description": "Property and backing field"
  },
  "propg": {
    "prefix": "propg",
    "body": [
      "public ${1:int} ${2:MyProperty} { get; private set; }$0"
    ],
    "description": "An automatically implemented property with a 'get' accessor and a private 'set' accessor. C# 3.0 or higher"
  },
  "prop": {
    "prefix": "prop",
    "body": [
      "public ${1:int} ${2:MyProperty} { get; set; }$0"
    ],
    "description": "An automatically implemented property. C# 3.0 or higher"
  },
  "sim": {
    "prefix": "sim",
    "body": [
      "static int Main(string[] args)",
      "{",
      "\t$0",
      "\treturn 0;",
      "}"
    ],
    "description": "int Main()"
  },
  "Struct": {
    "prefix": "struct",
    "body": [
      "struct ${1:Name}",
      "{",
      "\t$0",
      "} // End of struct $1"
    ],
    "description": "Struct"
  },
  "svm": {
    "prefix": "svm",
    "body": [
      "static void Main(string[] args)",
      "{",
      "\t$0",
      "}"
    ],
    "description": "void Main()"
  },
  "Switch statement": {
    "prefix": "switch",
    "body": [
      "switch (${1:switch_on})",
      "{",
      "\t$0",
      "\tdefault:",
      "} // End of switch"
    ],
    "description": "Switch statement"
  },
  "Try finally": {
    "prefix": "tryf",
    "body": [
      "try",
      "{",
      "\t$1",
      "}",
      "finally",
      "{",
      "\t$0",
      "} // End of try-catch"
    ],
    "description": "Try finally"
  },
  "Try catch": {
    "prefix": "try",
    "body": [
      "try",
      "{",
      "\t$1",
      "}",
      "catch (${2:System.Exception})",
      "{",
      "\t$0",
      "\tthrow;",
      "} // End of try-catch"
    ],
    "description": "Try catch"
  },
  "Unchecked block": {
    "prefix": "unchecked",
    "body": [
      "unchecked",
      "{",
      "\t$0",
      "}"
    ],
    "description": "Unchecked block"
  },
  "Unsafe statement": {
    "prefix": "unsafe",
    "body": [
      "unsafe",
      "{",
      "\t$0",
      "}"
    ],
    "description": "Unsafe statement"
  },
  "Using statement": {
    "prefix": "using",
    "body": [
      "using (${1:resource})",
      "{",
      "\t$0",
      "}"
    ],
    "description": "Using statement"
  },
  "While loop": {
    "prefix": "while",
    "body": [
      "while (${1:true})",
      "{",
      "\t$0",
      "}"
    ],
    "description": "While loop"
  },
  "constructor": {
    "prefix": "ctor",
    "body": [
      "${1:public} ${2:$TM_FILENAME_BASE}(${3:Parameters})",
      "{",
      "\t$0",
      "}"
    ],
    "description": "constructor"
  },
  "xUnit Test": {
    "prefix": "fact",
    "body": [
      "[Fact]",
      "public void ${1:TestName}()",
      "{",
      "//Given",
      "",
      "//When",
      "",
      "//Then",
      "}$0"
    ],
    "description": "create xunit test method"
  },
  "Creates a Method structure": {
    "prefix": "method",
    "body": [
      "${1:public} ${2:void} ${3:MyMethod}(${4:string} ${5:parameter})",
      "{",
      "\t$0",
      "} // End of $3"
    ],
    "description": "Creates a Method structure"
  },
  "Creates an Async Method structure": {
    "prefix": "method_async",
    "body": [
      "${1:public} async ${2:Task}<${3:object}> ${4:MyMethodAsync}(${5:string} ${6:parameter})",
      "{",
      "\t$0",
      "} // End of $4"
    ],
    "description": "Creates an async Method structure"
  },
  "cls": {
    "prefix": "cls",
    "body": [
      "${1:public} class ${2:$TM_FILENAME_BASE}",
      "{",
      "\t$0",
      "} // End of class $2"
    ],
    "description": "Create new class"
  }
}
