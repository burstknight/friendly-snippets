{
    "Starter Template": {
    "prefix": "st",
    "body": [
        "#include <iostream>",
        "",
        "int main (int argc, char** argv) {",
            "\t$1",
            "",
            "\treturn 0;",
        "} // End of main",
		""
        ],
        "description": "Standard starter template for a tiny C++ program"
    },
    "for": {
        "prefix": "for",
        "body": [
            "for (${1:size_t} ${2:i} = ${3:0}; $2 < ${4:length}; $2++) {",
            "\t$0",
            "} // End of for-loop",
			"\r"
        ],
        "description": "Code snippet for 'for' loop"
    },
    "forr": {
        "prefix": "forr",
        "body": [
            "for (${1:size_t} ${2:i} = ${3:length} - 1; $2 >= ${4:0}; $2--) {",
            "\t$0",
            "} // End of for-loop",
			"\r"
        ],
        "description": "Code snippet for reverse 'for' loop"
    },
    "do": {
        "prefix": "do",
        "body": ["do {", "\t$0", "} while($1);"],
        "description": "Code snippet for do...while loop"
    },
    "while": {
        "prefix": "while",
        "body": [
			"while ($1) {", 
			"\t$2", 
			"} // End of while-loop",
			"\r"
		],
        "description": "Code snippet while loop"
    },
    "foreach": {
        "prefix": "fore",
        "body": [
            "for(${1:auto} ${2:var} : ${3:collection_to_loop}) {",
            "\t$0",
            "} // End of for-loop",
			"\r"
        ],
        "description": "Code snippet for range-based for loop (c++11) statement"
    },
    "if": {
        "prefix": "if",
        "body": ["if ($1) {", "\t$0", "} // End of if-condition", ""],
        "description": "Code snippet for if statement"
    },
    "else": {
        "prefix": "else",
        "body": ["else {", "\t$0", "}"],
        "description": "Code snippet for else statement"
    },
    "else if": {
        "prefix": "else if",
        "body": ["else if ($1) {", "\t$0", "}"],
        "description": "Code snippet for else-if statement"
    },
    "enum": {
        "prefix": "enum",
        "body": ["enum ${1:MyEnum} {", "\t$0", "};"],
        "description": "Code snippet for enum"
    },
    "enum class": {
        "prefix": "enum class",
        "body": ["enum class ${1:MyClass} {$0};"],
        "description": "Code snippet for enum class (c++11)"
    },
    "class": {
        "prefix": "class",
        "body": [
            "class ${1:MyClass} {",
            "\tprivate:",
            "\t\t$2",
			"",
            "\tpublic:",
            "\t\t$1();",
            "\t\t$1($1 &&) = default;",
            "\t\t$1(const $1 &) = default;",
            "\t\t$1 &operator=($1 &&) = default;",
            "\t\t$1 &operator=(const $1 &) = default;",
            "\t\tvirtual ~$1();",
            "}; // End of class $1",
			""
        ],
        "description": "Code snippet for class"
    },
    "eclass": {
        "prefix": "eclass",
        "body": [
            "class ${1:MyClass} {",
            "\tprivate:",
            "\t\t$2",
			"",
            "\tpublic:",
            "\t\t$3",
            "}; // End of class $1",
            ""
        ],
        "description": "Code snippet for empty class"
    },
    "qclass": {
        "prefix": "qclass",
        "body": [
            "class ${1:MyClass} : public QObject {",
            "\tQ_OBJECT;",
            "public:",
            "\nexplicit $1(QObject *parent = nullptr);",
            "\t$2",
            "signals:",
            "",
            "public slots:",
            "};",
            ""
        ],
        "description": "Code snippet for empty Qt class"
    },
    "classi": {
        "prefix": "classi",
        "body": [
            "class ${1:MyClass} {",
            "public:",
            "\t$1() = default;",
            "\t$1($1 &&) = default;",
            "\t$1(const $1 &) = default;",
            "\t$1 &operator=($1 &&) = default;",
            "\t$1 &operator=(const $1 &) = default;",
            "\t~$1() = default;",
            "",
            "private:",
            "\t$2",
            "};"
        ],
        "description": "Code snippet for class with inline constructor/destructor"
    },
    "interface": {
        "prefix": "interface",
        "body": ["__interface I${1:Interface} {", "\t$0", "};"],
        "description": "Code snippet for interface (Visual C++)"
    },
    "namespace": {
        "prefix": "ns",
        "body": ["namespace ${1:MyNamespace} {", "\t$0", "} // End of namespace $1", ""]
    },
	"using namespace": {
		"prefix": "usn",
		"body": [
			"using namespace $1;$2"
		]
	},
    "#ifdef": {
        "prefix": "#ifdef",
        "body": ["#ifdef ${1:DEBUG}", "$0", "#endif // End of ${DEBUG}"],
        "description": "Code snippet for #ifdef"
    },
    "#ifndef": {
        "prefix": "#ifndef",
        "body": ["#ifndef ${1:DEBUG}", "$0", "#endif // End of $1"],
        "description": "Code snippet for #ifndef"
    },
    "#if": {
        "prefix": "#if",
        "body": ["#if ${1:0}", "$0", "#endif // End of $1"],
        "description": "Code snippet for #if"
    },
    "struct": {
        "prefix": "struct",
        "body": ["struct ${1:MyStruct} {", "\t$0", "};"],
        "description": "Code snippet for struct"
    },
    "switch": {
        "prefix": "sw",
        "body": [
            "switch (${1:switch_on}) {",
            "\tdefault:",
            "\t\t$0",
            "\t\tbreak;",
            "} // End of switch",
			"\r"
        ],
        "description": "Code snippet for switch statement"
    },
    "try": {
        "prefix": "try",
        "body": [
            "try {",
            "\t$2",
            "} catch (${1:const std::exception&}) {",
            "} // End of try-catch",
			"\r"
        ],
        "description": "Code snippet for try-catch"
    },
    "union": {
        "prefix": "union",
        "body": ["union ${1:MyUnion} {", "\t$0", "};"],
        "description": "Code snippet for union"
    },
    "cout": {
        "prefix": "cout",
        "body": ["std::cout << ${1:message};"],
        "description": "Code snippet for printing to std::cout, provided the header is set"
    },
    "cin": {
        "prefix": "cin",
        "body": ["std::cin >> $1;"],
        "description": "Code snippet for std::cin, provided the header is set"
    },
    "printf": {
        "prefix": "pri",
        "body": ["printf(\"$1\\n\"$0);"],
        "description": "Generic printf() snippet"
    },
    "sprintf": {
        "prefix": "spri",
        "body": ["sprintf($1, \"$2\\n\"$0);"],
        "description": "Generic sprintf() snippet"
    },
    "fprintf": {
        "prefix": "fpri",
        "body": ["fprintf(${1:stderr}, \"$2\\n\"$0);"],
        "description": "Generic fprintf() snippet"
    },
    "scanf": {
        "prefix": "scanf",
        "body": ["scanf(\"$1\"$0);"],
        "description": "Generic scanf() snippet"
    },
    "sscanf": {
        "prefix": "sscanf",
        "body": ["sscanf($1, \"$2\"$0);"],
        "description": "Generic sscanf() snippet"
    },
    "fscanf": {
        "prefix": "fscanf",
        "body": ["fscanf($1, \"$2\"$0);"],
        "description": "Generic fscanf() snippet"
    },
    "#inc": {
        "prefix": "#inc",
        "body": ["#include \"$1\"$2"],
        "description": "Code snippet for #include \" \""
    },
    "#inc<": {
        "prefix": "#inc<",
        "body": ["#include <$1>$2"],
        "description": "Code snippet for #include < >"
    },
    "#def": {
        "prefix": "#def",
        "body": ["#define $0"],
        "description": "Code snippet for #define \" \""
    },
	"#defm":{
		"prefix": "#defm",
		"body": [
			"#define ${1:macro}(${2:arg}) \\",
			"\t$3"
		],
		"description": "Code snippet for #define macro()"
	},
    "Main function template": {
        "prefix": "main",
        "body": [
            "int main (int argc, char** argv) {",
            "\t$1",
            "\treturn 0;",
            "} // End of main"
        ],
        "description": "A standard main function for a C++ program"
    },
    "#guard": {
      "prefix": "#hg",
      "body": [
        "#ifndef ${TM_DIRECTORY/(.*)/${1:/upcase}/}_${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_H",
        "#define ${TM_DIRECTORY/(.*)/${1:/upcase}/}_${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_H",
        "",
        "$0",
        "",
        "#endif  // End of ${TM_DIRECTORY/(.*)/${1:/upcase}/}_${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_H"
      ],
      "description": "header guard. format :\n\t<dirname>_<filename>_H"
    },
    "sca": {
      "prefix": "sca",
      "body": [
        "static_cast<${1:unsigned}>(${2:expr})$3"
      ],
      "description": "static_cast<type>(expression)"
    },
    "dca": {
      "prefix": "dca",
      "body": [
        "dynamic_cast<${1:unsigned}>(${2:expr})$3"
      ],
      "description": "dynamic_cast<type>(expression)"
    },
    "rca": {
      "prefix": "rca",
      "body": [
        "reinterpret_cast<${1:unsigned}>(${2:expr})$3"
      ],
      "description": "reinterpret_cast<type>(expression)"
    },
    "cca": {
      "prefix": "cca",
      "body": [
        "const_cast<${1:unsigned}>(${2:expr})$3"
      ],
      "description": "const_cast<type>(expression)"
    },
    "af": {
      "prefix": "af",
      "body": [
        "auto ${1:name}( ${2:void} ) -> ${3:auto} {",
        "\t${5}",
        "}"
      ],
      "description": "auto function and trailing return"
    },
	"TEST": {
		"prefix": "TE",
		"body": [
			"TEST(${1:myTest}, ${2:suit}) {",
			"\t$3",
			"} // End of $1::$2",
			""
		],
		"description": "Code snippet for adding gtest 'TEST()'"
	},
	"TEST_F": {
		"prefix": "TEF",
		"body": [
			"TEST_F(${1:myFixture}, $2{suit}) {",
			"\t$3",
			"} // End of $1::$2",
			""
		],
		"description": "Code snippet for adding gtest 'TEST_F()'"
	},
	"gtest class": {
		"prefix": "gcls",
		"body": [
			"class ${1:myFixture}: public ::testing::Test$2 {",
			"\t// protected member functions",
			"\tprotected:",
			"\t\tvirtual void SetUp() override",
			"\t\tvirtual void TearDown() override",
			"} // End of class $1",
			""
		],
		"description": "Code snippet for gtest fixture"
	},
	"gtest main": {
		"prefix": "gmain",
		"body": [
			"int main(int argc, char** argv) {",
			"\t::testing::InitGoogleTest(&argc, argv);",
			"\treturn RUN_ALL_TESTS();",
			"} // End of main",
			""
		],
		"description": "Code snippet for gtest main"
	},
	"make_shared<T>": {
		"prefix": "m_sh",
		"body": ["make_shared<${1:Typename}>($2);"],
		"description": "Code snippet for make_shared<T>"
	},
	"make_unique<T>": {
		"prefix": "m_un",
		"body": ["make_unique<${1:Typename}>$($2);"],
		"description": "Code snippet for make_unique<T>"
	}
}
